<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lotus&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-05-02T05:19:21.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Moon Lotus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>将MCP抽丝剥茧，什么是Function Calling？</title>
    <link href="http://example.com/2025/05/02/mcp-01/"/>
    <id>http://example.com/2025/05/02/mcp-01/</id>
    <published>2025-05-02T05:19:21.000Z</published>
    <updated>2025-05-02T05:19:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025-AI元年"><a href="#2025-AI元年" class="headerlink" title="2025, AI元年"></a>2025, AI元年</h1><p>三年前，也就是2022年，GPT3.5就已经横空出世，引起一波不小的反响</p><p>当时仍是高中的笔者，对其分外关注，依稀记得了解到3.5模型对比3.0的<del>什么什么因子数</del>暴增数十倍</p><p>原理大概是基于训练的海量数据，根据当前的几个词不断推断生成之后的词，然后根据标注人员对齐进行评估（预训练）</p><p>当时的LLM，虽然神奇，但是也终究影响有限，功能不足，大家拿来玩一些小需求，问问弱智吧问题（这个貌似持续到了今日），也就一笑而过，在当时，大部分人并未放在心上</p><hr><p>三年后的如今，大模型生态完成了井喷式的爆发，国产如Qwen，深度求索，国外如CloseAI，Gemini，Claude等等，各家的新模型，新技术，新协议如同雨后春笋般冒出</p><p>多模态，联网搜索，RAG，推理模型，Deep Search，Workflow，Agent..</p><p>2022年，大模型还只能作为对话类的生成式模型</p><p>2025年，LLMs在Prompt，Tools，Context，ReAct，RAG，Human in Loop等等的加持下，已经可以接手许多复杂的任务（Agent的出现），达到了人类难以想象的高度</p><p><del>舔AI的话多说无益</del>，接下来就选MCP这个目前最为“ 明星 ”的技术作为迈入入AI技术花园的引子吧~</p><h2 id="抽丝剥茧：什么是Function-Calling"><a href="#抽丝剥茧：什么是Function-Calling" class="headerlink" title="抽丝剥茧：什么是Function Calling"></a>抽丝剥茧：什么是Function Calling</h2><p>你说你了解行业热点MCP技术，我问你<em>Function Calling</em>是什么却是一问三不知？😅</p><p>简单而言，<em>Function Calling</em>就是赋予LLMs调用外部函数能力的一种机制</p><p>❗注意，大模型本身<strong>并没有执行函数的能力</strong>，目前各种AI应用中，大模型的作用是作为核心的推理大脑</p><blockquote><p>有些小朋友看到大模型输出了一段代码并且告诉了你执行结果，还觉得，哇！好牛逼，大模型还能推理出代码的执行结果？？！</p><p>​- 其实只是背后有一个代码运行环境以及类库而已~</p></blockquote><p>具体而言，系统输入的Prompt会告诉LLMs他有哪些可以调用的函数，例如<code>gold_price_fetch</code>这个函数可以获取当前的实时金价</p><p>那么大模型在知晓自己拥有调用这个功能的前提，又根据输入推断出当前的回答需要用到这个功能</p><p>就会在他的当次输出中以结构化的格式（如JSON）包含自己需要调用某个函数，传入的参数</p><p>别的中间层检测到输出中包含特殊的结构化调用文本，就会传参在外部执行对应的函数，并将函数的返回值拼接成Prompt再次喂给大模型</p><p>——这样，LLMs就具备了<strong>极其重要</strong>的感知以及和外界交互的能力。毕竟，这里的函数是一个抽象，可以是任何操作，你能想象到的所有功能，只要能规定好入参出参，就能给予大模型“调用”这个操作的能力！这很令人兴奋，对吧？</p><blockquote><p>严格来说，任何操作的能力更偏向于Tools（工具）的定义一些，Function更明指预定义好的简单函数，而Tools则可以更为复杂以及抽象，例如与操作系统交互，多步骤任务，等等。不过，不管是Funtion Calling还是Tools Calling的核心思想都是一样的。</p></blockquote>]]></content>
    
    
    <summary type="html">带你了解炙手可热的MCP(零)</summary>
    
    
    
    
    <category term="MCP" scheme="http://example.com/tags/MCP/"/>
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://example.com/2025/03/30/origin/"/>
    <id>http://example.com/2025/03/30/origin/</id>
    <published>2025-03-30T13:49:20.000Z</published>
    <updated>2025-03-30T13:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<hr><br><img src="大枣.jpg" alt="大枣" style="zoom: 10%;float:left;margin:0 300px 0 0;border-radius:50%;box-shadow: 10px 10px 50px #3e3e3e;" /><p>Lotus<br>莲<br><a class="a-music" style= "color:#587895;" href="https:\\music.163.com\#\song?id=32046764">空っぽの空に潰される</a></p><hr><br><blockquote><ul><li>🏫目前是一名软件工程专业大<del>N</del><strong>在读</strong>本科生, 某厂实习中~</li><li>📚学习方向: <code>Java / AI</code>后端开发</li><li>🔍正在修炼的技能树: 后端开发 &#x2F; <strong>计算机基础</strong> &#x2F; <strong>AI技术</strong></li><li>📓热爱分享知识, 会在博客中记录自己的学习历程, 分享<del><code>烂大街</code></del> 新奇的知识点</li></ul></blockquote><h2 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h2><ul><li><p><a href="mailto:&#x6c;&#111;&#x74;&#x75;&#115;&#48;&#55;&#50;&#x31;&#x40;&#111;&#x75;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;">📧<em>lotus0721@outlook.com</em></a></p></li><li><p><a href="https://github.com/fantasy-lotus">👥Github</a></p></li></ul><style>.a-music {    text-decoration: underline;}    hr {    background-color: #b5c2c5;    height: 0.5px;    border: none;}</style>]]></content>
    
    
    <summary type="html">欢迎访问我的博客网站➡️</summary>
    
    
    
    
    <category term="Origin" scheme="http://example.com/tags/Origin/"/>
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
  </entry>
  
</feed>
